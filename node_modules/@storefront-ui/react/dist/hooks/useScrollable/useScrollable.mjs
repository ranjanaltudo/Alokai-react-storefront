import { useRef as x, useState as G, useEffect as H, useCallback as C } from "react";
import { Scrollable as T } from "@storefront-ui/shared";
import { createPropsGetter as w, composeHandlers as y } from "../../shared/utils/props.mjs";
function z({
  activeIndex: n,
  direction: b,
  drag: h,
  reduceMotion: o,
  onDragStart: s,
  onDragEnd: r,
  onScroll: c,
  onPrev: u,
  onNext: d,
  isActiveIndexCentered: m
} = {}) {
  const f = x(null), l = x(null), [i, k] = G({ hasPrev: !1, hasNext: !1, isDragged: !1 });
  H(() => {
    const e = f.current;
    if (!e)
      return () => {
      };
    l.current = new T(e, {
      direction: b,
      drag: h,
      reduceMotion: o,
      onPrev: u,
      onNext: d,
      onScroll: (t) => {
        k((a) => ({ ...a, hasNext: t.hasNext, hasPrev: t.hasPrev })), c == null || c(t);
      },
      onDragStart: (t) => {
        k((a) => ({ ...a, isDragged: t.isDragged })), s == null || s(t);
      },
      onDragEnd: r
    });
    const R = l.current.register();
    return typeof n == "number" && n >= 0 && m && l.current.scrollToIndex(n), R;
  }, [
    f,
    n,
    b,
    h,
    o,
    s,
    r,
    c,
    u,
    d,
    m
  ]);
  const N = C(() => {
    var e;
    (e = l.current) == null || e.prev();
  }, []), g = C(() => {
    var e;
    (e = l.current) == null || e.next();
  }, []), v = w((e) => ({
    onClick: y(N, e == null ? void 0 : e.onClick),
    disabled: typeof e.disabled < "u" ? e.disabled : !i.hasPrev
  })), B = w((e) => ({
    onClick: y(g, e == null ? void 0 : e.onClick),
    disabled: typeof e.disabled < "u" ? e.disabled : !i.hasNext
  }));
  return {
    containerRef: f,
    getPrevButtonProps: v,
    getNextButtonProps: B,
    showNext: g,
    showPrev: N,
    state: i
  };
}
export {
  z as useScrollable
};
