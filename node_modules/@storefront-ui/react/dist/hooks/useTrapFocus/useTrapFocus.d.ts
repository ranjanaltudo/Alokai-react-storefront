import type { CheckOptions, FocusableElement, TabbableOptions } from 'tabbable';
import { type RefObject } from 'react';
export declare enum InitialFocusType {
    autofocus = "autofocus",
    container = "container"
}
type UseTrapFocusOptions = TabbableOptions & CheckOptions & {
    trapTabs?: boolean;
    arrowFocusGroupSelector?: string;
    activeState?: boolean;
    initialFocus?: number | `${InitialFocusType}` | false;
    initialFocusContainerFallback?: boolean;
    /**
     * Enabling both `left` | `up` | `right` | `down` arrow keys.
     * @deprecated Since version 2.3. Use arrowKeysLeftRight or/and arrowKeysUpDown options instead.
     */
    arrowKeysOn?: boolean;
    arrowKeysLeftRight?: boolean;
    arrowKeysUpDown?: boolean;
};
export declare const useTrapFocus: (containerElementRef: RefObject<HTMLElement | null>, options?: UseTrapFocusOptions) => {
    current: HTMLElement | undefined;
    focusables: FocusableElement[];
    focusNext: ({ current, event, focusables, arrowFocusGroupSelector, }: {
        current?: FocusableElement | undefined;
        event?: KeyboardEvent | undefined;
        focusables: FocusableElement[];
        arrowFocusGroupSelector?: string | undefined;
    }) => FocusableElement | undefined;
    focusPrev: ({ current, focusables, event, arrowFocusGroupSelector, }: {
        current?: FocusableElement | undefined;
        focusables: FocusableElement[];
        event?: KeyboardEvent | undefined;
        arrowFocusGroupSelector?: string | undefined;
    }) => FocusableElement | undefined;
    updateFocusableElements: () => void;
};
export {};
