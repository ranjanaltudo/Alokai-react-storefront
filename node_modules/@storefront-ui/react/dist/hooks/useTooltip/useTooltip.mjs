import { useRef as v } from "react";
import { offset as M, shift as R, flip as S, arrow as T } from "@floating-ui/react-dom";
import { useDisclosure as $ } from "../useDisclosure/useDisclosure.mjs";
import { usePopover as D } from "../usePopover/usePopover.mjs";
import { createPropsGetter as s, composeHandlers as u } from "../../shared/utils/props.mjs";
function F(w) {
  const {
    placement: n = "top",
    middleware: g = [M(8), R(), S()],
    arrowSize: o = "6px",
    ...y
  } = w || {}, t = v(null), { isOpen: l, open: p, close: i, toggle: d } = $(), {
    refs: r,
    style: a,
    middlewareData: f
  } = D({
    isOpen: l,
    placement: n,
    middleware: [...g, T({ element: t })],
    ...y
  });
  function m() {
    if (f.arrow) {
      const { x: e, y: c } = f.arrow, P = n.split("-")[0];
      return {
        position: "absolute",
        width: o,
        height: o,
        top: typeof c == "number" ? `${c}px` : "",
        left: typeof e == "number" ? `${e}px` : "",
        [{
          top: "bottom",
          right: "left",
          bottom: "top",
          left: "right"
        }[P]]: `calc(${o} / -2)`
      };
    }
    return {};
  }
  const b = s((e) => ({
    ref: r.setReference,
    onMouseEnter: u(p, e.onMouseEnter),
    onMouseLeave: u(i, e.onMouseLeave)
  })), h = s((e) => ({
    ref: r.setFloating,
    style: { ...e.style, ...a }
  })), x = s((e) => ({
    ref: t,
    style: { ...e.style, ...m() }
  }));
  return {
    refs: {
      ...r,
      arrow: t
    },
    style: {
      floating: a,
      arrow: m()
    },
    isOpen: l,
    open: p,
    close: i,
    toggle: d,
    getTriggerProps: b,
    getTooltipProps: h,
    getArrowProps: x
  };
}
export {
  F as useTooltip
};
