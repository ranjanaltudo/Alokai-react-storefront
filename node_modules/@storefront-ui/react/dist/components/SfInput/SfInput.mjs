"use client";
import { jsxs as f, jsx as g } from "react/jsx-runtime";
import r from "classnames";
import { SfInputSize as t } from "@storefront-ui/shared";
import { useFocusVisible as d } from "../../hooks/useFocusVisible/useFocusVisible.mjs";
import { polymorphicForwardRef as x } from "../../shared/utils/index.mjs";
const h = "span", b = {
  [t.sm]: " h-[32px]",
  [t.base]: "h-[40px]",
  [t.lg]: "h-[48px]"
}, I = x(
  ({ wrapperAs: i, size: n = t.base, slotPrefix: a, slotSuffix: s, invalid: e, className: o, wrapperClassName: p, ...u }, c) => {
    const l = i || h, { isFocusVisible: m } = d({ isTextInput: !0 });
    return /* @__PURE__ */ f(
      l,
      {
        className: r([
          "flex items-center gap-2 px-4 bg-white rounded-md ring-1 text-neutral-500 hover:ring-primary-700 focus-within:caret-primary-700 active:caret-primary-700 active:ring-primary-700 active:ring-2 focus-within:ring-primary-700 focus-within:ring-2",
          {
            "ring-2 ring-negative-700": e,
            "ring-1 ring-neutral-300": !e,
            "focus-within:outline focus-within:outline-offset": m
          },
          b[n],
          p
        ]),
        "data-testid": "input",
        children: [
          a,
          /* @__PURE__ */ g(
            "input",
            {
              className: r([
                "min-w-[80px] w-full text-base outline-none appearance-none text-neutral-900 disabled:cursor-not-allowed disabled:bg-transparent read-only:bg-transparent",
                o
              ]),
              type: "text",
              "data-testid": "input-field",
              size: 1,
              ref: c,
              ...u
            }
          ),
          s
        ]
      }
    );
  }
);
export {
  I as default
};
